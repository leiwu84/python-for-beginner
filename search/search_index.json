{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Python for Beginner.</p> <p>Introduction</p> <p>Installation Use</p> <p>Code Style Guidelines</p>"},{"location":"code/","title":"Code","text":""},{"location":"code/#basic-types","title":"Basic Types","text":""},{"location":"code/#built-in-data-types","title":"Built-in Data Types","text":"<ul> <li>Type: <code>NoneType</code>. Only one value: <code>None</code>.</li> <li>Type: <code>bool</code>. Only two values: <code>True</code> and <code>False</code>. </li> <li>Type: <code>int</code>. Examples: <code>-1</code>, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, ...</li> <li>Type: <code>float</code>. Examples: <code>-1.1</code>, <code>0.5</code>, <code>1.0</code>, <code>23.456</code>, ...</li> <li>Type: <code>complex</code>. Examples: <code>1 + 2j</code>, <code>-1.5 + 123.45j</code>, ...</li> <li>Type: <code>str</code>. Examples: <code>'Hello World'</code>, <code>\"name\"</code>, <code>'Monday'</code>, ...</li> <li>...</li> </ul>"},{"location":"code/#string","title":"String","text":"<p>Enclosed by a pair of quotation marks.</p> <p><code>'This is a string'</code></p> <p><code>\"This is a string, too\"</code></p> <pre><code>\"\"\"\nThis is a string over multiple lines.\nLine 1.\nLine 2.\n\"\"\"\n</code></pre>"},{"location":"code/#tuple","title":"Tuple","text":"<ul> <li>The built-in type is <code>tuple</code>. Enclosed by <code>(</code> <code>)</code>. Elements are separated by comma <code>,</code>.</li> <li>Examples:<ul> <li><code>(1, 2, 3)</code></li> <li><code>('a', 'b')</code></li> <li><code>(True, 100, -1.5, 1+2j, 'name', None, [1, 2])</code></li> <li>Nested tuple: <code>(('apple', 'orange'), (1, 2, 3), 4, 5)</code></li> </ul> </li> </ul>"},{"location":"code/#access-elements","title":"Access Elements","text":"<p>Use the index enclosed by <code>[</code> <code>]</code>. The index starts from <code>0</code>. </p><pre><code>fruits_tuple = ('apple', 'orange', ('banana', 'berry'))\n\nprint(fruits_tuple[0])\nprint(fruits_tuple[2][0])\n</code></pre>"},{"location":"code/#list","title":"List","text":"<ul> <li>The built-in type is <code>list</code>. Enclosed by <code>[</code> <code>]</code>. Elements are separated by comma <code>,</code>.</li> <li>Examples: <ul> <li><code>[1, 2, 3]</code></li> <li><code>['a', 'b']</code></li> <li><code>[True, 100, -1.5, 1+2j, 'name', None, (1, 2)]</code></li> <li>Nested list: <code>[['apple', 'orange'], [1, 2, 3], 4, 5]</code></li> </ul> </li> </ul>"},{"location":"code/#access-elements_1","title":"Access Elements","text":"<p>Use the index enclosed by <code>[</code> <code>]</code>. The index starts from <code>0</code>. </p><pre><code>fruits_list = ['apple', 'orange', ['banana', 'berry']]\n\nprint(fruits_list[1])\nprint(fruits_list[2][1])\n</code></pre>"},{"location":"code/#dict","title":"Dict","text":"<ul> <li>The built-in type is <code>dict</code>. Enclosed by <code>{</code> <code>}</code>. Elements are pairs of key-values. Each pair is defined in the format of <code>key: value</code>. Pairs are separated by comma <code>,</code>.</li> <li>Examples:<ul> <li><code>{'name': 'apple', 'color': 'red', 'price': 1.23}</code></li> <li><code>{1:  'first', 2: '2nd', 3: 'third', 4: None}</code></li> <li>Nested dictionary:  <code>{'name': 'apple', 'prop': {'color': 'red', 'price': 1.23}}</code></li> </ul> </li> </ul>"},{"location":"code/#access-elements_2","title":"Access Elements","text":"<p>Use the key enclosed by <code>[</code> <code>]</code>. The key is defined in each kay-value pair.  </p><pre><code>fruits = {'name': 'apple', 'prop': {'color': 'red', 'price': 1.23}}\n\nprint(fruits['name'])\nprint(fruits['prop']['color'])\n</code></pre>"},{"location":"code/#operators","title":"Operators","text":"<ul> <li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>%</code><ul> <li>With numbers, e.g. : <code>1 + 1</code>, <code>3 - 1.5</code>, <code>2*3</code>, <code>4**0.5</code>, <code>30/7</code>, <code>30%7</code></li> <li>With strings, e.g.: <code>'Today' + ' ' + 'is ' + 'Tuesday.'</code></li> <li>With lists, e.g.: <code>[1]*3</code>, <code>['apple']*3</code>, <code>[None]*3</code></li> </ul> </li> <li><code>&gt;</code>, <code>&lt;</code>, <code>==</code>, <code>&gt;=</code>, <code>&lt;=</code><ul> <li><code>5 &gt; 3</code>, <code>-1 == 10</code>, <code>5 &lt;= 3</code>, <code>'A' &lt; 'B'</code></li> </ul> </li> </ul>"},{"location":"code/#assignment","title":"Assignment","text":"<p>Assign any type of data a name by the symbol <code>=</code>.</p> <p>Examples:</p> <pre><code>a = 1\nfruit = 'apple'\nintegers = [1, 2, 3]\ncredentials = {'user': 'Me', 'pass': '***'}\n</code></pre> <pre><code>total = 1 + 1\nmsg = 'Today is' + ' Tuesday.'\nis_less = 3 &lt; 4\n</code></pre>"},{"location":"code/#benefit-of-assignment","title":"Benefit of Assignment","text":"<p>Reuse in other expressions. </p><pre><code>a = 2\nb = a * 3\nc, d = 'Hello ', 'World.'\ngreeting = c + d \n</code></pre>"},{"location":"code/#naming-style","title":"Naming style","text":"<ul> <li>Alphanumeric (<code>A</code>-<code>Z</code>, <code>0</code>-<code>9</code>) and underscore <code>_</code></li> <li>Recommendation: <ul> <li>Short but informative.</li> <li>For constants, all in upper case<ul> <li>E.g. <code>COLOR = '#00FF00'</code>, <code>MY_AGE = 18</code>.</li> </ul> </li> <li>For variables, all in lower case<ul> <li>E.g. <code>class_room_2</code> instead of <code>cr2</code> or <code>x</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"code/#comments","title":"Comments","text":"<p>Anything after the symble <code>#</code> is treated as comments.</p> <pre><code>a = 1 * 2  # Explain the code\n# If you need to write more,\n# You can use multiple lines.\n</code></pre>"},{"location":"code/#block-and-indentation","title":"Block and Indentation","text":"<p>Its design philosophy emphasizes code readability with the use of significant indentation. </p> <p>Syntax </p><pre><code>expression:\n    line_1\n    line_2\n</code></pre> <ul> <li>The first line is not indented, ended by a colon <code>:</code></li> <li>The following lines in the block must be indented with the same number of spaces. A common practice is four spaces.</li> </ul>"},{"location":"code/#loops","title":"Loops","text":"<p>Loops let the program iteratively run a block of code.</p> <ul> <li><code>while</code>-loop</li> <li><code>for</code>-loop</li> </ul>"},{"location":"code/#while-loop","title":"While Loop","text":"<pre><code>while expression:\n    block of statements\n</code></pre> If the expression is <code>True</code>, then executes the block of statements. Otherwise, the <code>while</code>-loop is finished. Example: <pre><code>count = 1\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"code/#for-loop","title":"For Loop","text":"<pre><code>for elem in a_sequence:\n    block of statements\n</code></pre> If all the elements in the sequence is used, the <code>for</code>-loop is finished. Example: <pre><code>for count in [1, 2, 3, 4]:\n    print(count)\n</code></pre>"},{"location":"code/#function","title":"Function","text":""},{"location":"code/#syntax-of-definition","title":"Syntax of definition","text":"<pre><code>def func_name(param_1, param_2, param_3=3):\n    \"\"\"\n    Docstring explains the purpose, \n    inputs, and returns of this function.\n    \"\"\"\n    return param_1 + param_2 - param_3\n</code></pre> <p>Note the definition of the function can have 2 different kinds of input parameters.</p> <ul> <li>Positional parameter - A positional parameter does not have a defaul value, like <code>param_1</code> and <code>param_2</code> in this example.</li> <li>Keyword parameter - A keyword parameter has a defaul value, like <code>param_3</code> in this example.</li> </ul> <p>Info</p> <p>When defining a function, positional parameters must be defined before keyword parameters. And accordingly, when calling a function, the positional argument </p>"},{"location":"code/#example-of-call","title":"Example of call","text":"<pre><code># Use the function name followed by all the\n#   arguments, enclosed by ().\n# 1 is a positional argument for the positional parameter param_1\n# param_2=2 is a keyword argument for the positional parameter param_2\n# param_3=4 is a keyword argument for the keyword parameter param_2\n# The returned is assigned to variable res.\nres = func_name(1, param_2=2, param_3=4)\nprint(res)\n</code></pre> <p>Terminology</p> <ul> <li>Input parameter: An input that is in the definition of a function.</li> <li>Argument: An input that is provided when calling a function.</li> </ul> <p>Info</p> <p>It is allowed to provide keyword argument to a positional parameter, like <code>param_2</code> in this example. And it is commonly a good practice to always use keyword argument for every input parameter, no matter if it is defined as a positional or keyword parameter, since it is more readable and it doesn't require the order of the arguments to be same as the definition. </p> <p>Here because <code>param_2</code> is provided as a keyword argument, it can be written after <code>param_3</code>. But <code>param_1</code> is provided as a positional argument, it has to be the first argument. </p> <pre><code>res = func_name(1, param_3=4, param_2=2)  # Allowed.\n</code></pre>"},{"location":"code/#class","title":"Class","text":""},{"location":"code/#syntax-of-definition_1","title":"Syntax of definition","text":"<pre><code>class ClassName:\n    def __init__(self, param_1, param_2):\n        self.param_1 = param_1  # attribute\n        self.param_2 = param_2  # attribute\n\n    def run(self, param_3):  # method\n        res = self.param_1 + self.param_2 - param_3\n        return res\n</code></pre>"},{"location":"code/#example-of-instance","title":"Example of instance","text":"<pre><code># Create an instance of the class\n# Provide arguments to the __init__ method.\ninstance_1 = ClassName(1, param_2=2)\n\n# Call a method\n#  use the dot sign \".\" followed by the method name\nres = instance_1.run(param_3=3)\nprint(res)\n</code></pre>"},{"location":"code/#import","title":"Import","text":"<p>Import an object from other files in the same folder and other folder to the current file.</p> <pre><code>import module_1\nimport module_2 as new_name\nfrom module_3 import ClassName, func_name, CONSTANT_1\nfrom package_4 import module_4\nfrom pacakge_5.module_5 import func_name_5\n</code></pre>"},{"location":"code/#examples-of-import","title":"Examples of Import","text":"<pre><code>import sys\nimport multiprocessing as mp\nfrom datetime import date\n\nprint(sys.platform)\nprint(mp.cpu_count())\nprint(date.today())\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Visit the official website</li> <li>Decide the version<ul> <li>Python 2 sunset date: 2020-01-01. Not recommended any more.</li> <li>Python 3. Normally choose the latest version (Python 3.12.2 on 2024-03-06)</li> </ul> </li> <li>Follow instrucitons for Windows, macOS, Linux</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>It is a high-level, interpreted, general-purpose programming language.</p> <p>Easy to pick up whether you're a first-time programmer or experienced with other languages.</p>"},{"location":"introduction/#general-purposes","title":"General Purposes","text":"<ul> <li>Scientific Computation</li> <li>Process Automation</li> <li>Visualization</li> <li>App Development</li> </ul>"},{"location":"introduction/#scientific-computation","title":"Scientific Computation","text":"<ul> <li>Linear Algebra</li> <li>Power System Analysis</li> <li>Signal Processing</li> <li>Control Theory</li> <li>Graph Theory</li> <li>Finance</li> <li>Artificial Intelligence / Machine Learning</li> <li>...</li> </ul>"},{"location":"introduction/#process-automation","title":"Process Automation","text":"<ul> <li>API's of various third-party software and web server<ul> <li>PowerFactory, PSCAD, ...</li> <li>Twitter, Yahoo Finance, ...</li> </ul> </li> <li>Document generation / edit<ul> <li>csv, json, xml, ...</li> <li>tex, md, adoc, ...</li> <li>docx, xlsx, pptx, ...</li> </ul> </li> </ul>"},{"location":"introduction/#visualization","title":"Visualization","text":"<ul> <li>Various plots (2D/3D)<ul> <li>line, bar, pie, scatter, candlestick, geograph, ...</li> </ul> </li> <li>Image processing</li> </ul>"},{"location":"introduction/#app-development","title":"App Development","text":"<p>Desktop App and Web App</p> <ul> <li>Front end</li> <li>Back end</li> <li>Database</li> </ul>"},{"location":"introduction/#python-skills-levels","title":"Python Skill's Levels","text":""},{"location":"introduction/#beginner","title":"Beginner","text":"<ul> <li>Be comfortable to use Python</li> <li>Know common packages/libraries</li> <li>Can realize certain (simple) tasks with Python</li> </ul>"},{"location":"introduction/#advanced","title":"Advanced","text":"<ul> <li>Can design clean and pragmatic code architecture with the concept of Separation of Concern.</li> <li>Can write clean code that is readable and maintainable.</li> <li>Can write tests for your code.</li> <li>Can use dedicated virtual environment for each Python project.</li> <li>...</li> </ul>"},{"location":"introduction/#some-key-resources","title":"Some Key Resources","text":"<ul> <li>Official website</li> <li>Google</li> <li>Stack Overflow</li> </ul>"},{"location":"style_guidelines/","title":"Style Guidelines","text":"<p>PEP8 is the industrial fundamental. You can also check Style Guides for Google, which gives more specifications than PEP8.</p>"},{"location":"style_guidelines/#vscode-setup","title":"VSCode Setup","text":"<p>Additionally, here is my settings in VSCode. If you have installed these plugins on VS Code, you can directly copy-paste my settings to yours if you like.</p> <ul> <li> <p>Python</p> <p>Note</p> <p>Pylance (Python language support) is installed automatically)</p> </li> <li> <p>iSort</p> </li> <li> <p>Black Formatter</p> </li> <li> <p>autoDocstring</p> </li> </ul> <p>Copy-paste the following block to your VSCode <code>settings.json</code>. </p><pre><code>\"[python]\": {\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": \"explicit\"\n    },\n    \"editor.defaultFormatter\": \"ms-python.black-formatter\",\n    \"editor.formatOnType\": true,\n},\n\"python.analysis.typeCheckingMode\": \"basic\",\n\"python.analysis.completeFunctionParens\": true,\n\"python.analysis.addImport.exactMatchOnly\": true,\n\"python.analysis.diagnosticSeverityOverrides\": {\n    \"reportOptionalMemberAccess\": \"none\",\n    \"reportOptionalSubscript\": \"none\",\n    \"reportOptionalOperand\": \"none\",\n    \"reportOptionalCall\": \"none\",\n    \"reportUnusedVariable\": \"warning\",\n    \"reportUnusedClass\": \"warning\",\n    \"reportUnusedExpression\": \"warning\",\n    \"reportUnusedFunction\": \"warning\",\n    \"reportUnusedImport\": \"warning\",\n},\n\"python.testing.pytestEnabled\": true,\n\"python.testing.pytestArgs\": [\n    \"tests\"\n],\n\"python.analysis.autoFormatStrings\": true,\n</code></pre>"},{"location":"use/","title":"Use","text":"<ul> <li>Write code in an interactive session from a terminal.</li> <li>Write a Python module (<code>py</code>-file). And run it with:<ul> <li>Command line in a terminal</li> <li>IDE<ul> <li>PyCharm</li> <li>Visual Studio Code</li> </ul> </li> </ul> </li> <li>Run</li> </ul>"},{"location":"use/#interactive-session","title":"Interactive Session","text":"<ul> <li>In a terminal, type <code>python</code> or <code>python3</code>, depending on the settings on your computer. And start coding.</li> <li>Type <code>exit()</code> to exit the interactive session.</li> </ul> <p>Figure 1: Code Python in an interactive session.</p>"},{"location":"use/#write-python-module","title":"Write Python Module","text":""},{"location":"use/#in-terminal","title":"In Terminal","text":"<p>Text editor in terminal, like vim.</p> <p>Figure 2: Code Python with Vim from a terminal.</p>"},{"location":"use/#plain-text-editor","title":"Plain Text Editor","text":"<p>Plain text editor, like Windows Notepad.</p> <p>Figure 3: Code Python with Notepad.</p>"},{"location":"use/#ide","title":"IDE","text":"<p>IDE: Integrated Development Environment</p> <ul> <li>Syntax high-lighting</li> <li>Code formatting and analysis</li> <li>Run and debug</li> </ul>"},{"location":"use/#run","title":"Run","text":""},{"location":"use/#command-line","title":"Command Line","text":"<ol> <li>Write the hello-world file and use the file name <code>hello_world.py</code>.</li> <li> <p>In a terminal, navigate to the directory where this file is stored, type the command     </p><pre><code>python &lt;filename.py&gt;\n</code></pre> <p>Note</p> <p><code>&lt;...&gt;</code> is a placeholder.</p> </li> </ol> <p>Figure 4: Run with command line</p>"},{"location":"use/#ide_1","title":"IDE","text":"<p>Click the <code>Run</code> button on an IDE.</p> <p>Figure 5: Run with IDE</p>"}]}